// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Attestation attestation
//
// swagger:discriminator Attestation type
type Attestation interface {
	runtime.Validatable

	// Type of the attestation.
	// Required: true
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type attestation struct {
	typeField string
}

// Type gets the type of this polymorphic type
func (m *attestation) Type() string {
	return "Attestation"
}

// SetType sets the type of this polymorphic type
func (m *attestation) SetType(val string) {
}

// UnmarshalAttestationSlice unmarshals polymorphic slices of Attestation
func UnmarshalAttestationSlice(reader io.Reader, consumer runtime.Consumer) ([]Attestation, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Attestation
	for _, element := range elements {
		obj, err := unmarshalAttestation(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAttestation unmarshals polymorphic Attestation
func UnmarshalAttestation(reader io.Reader, consumer runtime.Consumer) (Attestation, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAttestation(data, consumer)
}

func unmarshalAttestation(data []byte, consumer runtime.Consumer) (Attestation, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "Attestation":
		var result attestation
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SymmetricKeyAttestation":
		var result SymmetricKeyAttestation
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "TpmAttestation":
		var result TpmAttestation
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "X509Attestation":
		var result X509Attestation
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this attestation
func (m *attestation) Validate(formats strfmt.Registry) error {
	return nil
}
