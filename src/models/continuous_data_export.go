// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContinuousDataExport continuous data export
//
// swagger:model ContinuousDataExport
type ContinuousDataExport struct {

	// Display name of the continuous data export.
	DisplayName string `json:"displayName,omitempty"`

	// Boolean indicating whether the continuous data export should be running or not.
	// Required: true
	Enabled *bool `json:"enabled"`

	endpointField Endpoint

	// ETag used to prevent conflict in continuous data export updates.
	Etag string `json:"etag,omitempty"`

	// Unique ID of the continuous data export.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Data sources to export to the endpoint.
	// Required: true
	// Min Items: 1
	Sources []string `json:"sources"`

	// Indicates whether the continuous data export is starting, running, etc.
	// Read Only: true
	Status string `json:"status,omitempty"`
}

// Endpoint gets the endpoint of this base type
func (m *ContinuousDataExport) Endpoint() Endpoint {
	return m.endpointField
}

// SetEndpoint sets the endpoint of this base type
func (m *ContinuousDataExport) SetEndpoint(val Endpoint) {
	m.endpointField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ContinuousDataExport) UnmarshalJSON(raw []byte) error {
	var data struct {
		DisplayName string `json:"displayName,omitempty"`

		Enabled *bool `json:"enabled"`

		Endpoint json.RawMessage `json:"endpoint"`

		Etag string `json:"etag,omitempty"`

		ID string `json:"id,omitempty"`

		Sources []string `json:"sources"`

		Status string `json:"status,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propEndpoint, err := UnmarshalEndpoint(bytes.NewBuffer(data.Endpoint), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result ContinuousDataExport

	// displayName
	result.DisplayName = data.DisplayName

	// enabled
	result.Enabled = data.Enabled

	// endpoint
	result.endpointField = propEndpoint

	// etag
	result.Etag = data.Etag

	// id
	result.ID = data.ID

	// sources
	result.Sources = data.Sources

	// status
	result.Status = data.Status

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ContinuousDataExport) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		DisplayName string `json:"displayName,omitempty"`

		Enabled *bool `json:"enabled"`

		Etag string `json:"etag,omitempty"`

		ID string `json:"id,omitempty"`

		Sources []string `json:"sources"`

		Status string `json:"status,omitempty"`
	}{

		DisplayName: m.DisplayName,

		Enabled: m.Enabled,

		Etag: m.Etag,

		ID: m.ID,

		Sources: m.Sources,

		Status: m.Status,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Endpoint Endpoint `json:"endpoint"`
	}{

		Endpoint: m.endpointField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this continuous data export
func (m *ContinuousDataExport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContinuousDataExport) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *ContinuousDataExport) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint()); err != nil {
		return err
	}

	if err := m.Endpoint().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endpoint")
		}
		return err
	}

	return nil
}

var continuousDataExportSourcesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["devices","deviceTemplates","telemetry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		continuousDataExportSourcesItemsEnum = append(continuousDataExportSourcesItemsEnum, v)
	}
}

func (m *ContinuousDataExport) validateSourcesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, continuousDataExportSourcesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContinuousDataExport) validateSources(formats strfmt.Registry) error {

	if err := validate.Required("sources", "body", m.Sources); err != nil {
		return err
	}

	iSourcesSize := int64(len(m.Sources))

	if err := validate.MinItems("sources", "body", iSourcesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Sources); i++ {

		// value enum
		if err := m.validateSourcesItemsEnum("sources"+"."+strconv.Itoa(i), "body", m.Sources[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContinuousDataExport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContinuousDataExport) UnmarshalBinary(b []byte) error {
	var res ContinuousDataExport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
