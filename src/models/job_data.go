// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// JobData job data
//
// swagger:discriminator JobData type
type JobData interface {
	runtime.Validatable

	// The path to the target capability within the device template.
	// Required: true
	Path() *string
	SetPath(*string)

	// The device template which defines the target capability for the job.
	// Required: true
	Target() *string
	SetTarget(*string)

	// Type of the job data.
	// Required: true
	Type() string
	SetType(string)

	// The value used to update the target capability, if any.
	Value() interface{}
	SetValue(interface{})

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type jobData struct {
	pathField *string

	targetField *string

	typeField string

	valueField interface{}
}

// Path gets the path of this polymorphic type
func (m *jobData) Path() *string {
	return m.pathField
}

// SetPath sets the path of this polymorphic type
func (m *jobData) SetPath(val *string) {
	m.pathField = val
}

// Target gets the target of this polymorphic type
func (m *jobData) Target() *string {
	return m.targetField
}

// SetTarget sets the target of this polymorphic type
func (m *jobData) SetTarget(val *string) {
	m.targetField = val
}

// Type gets the type of this polymorphic type
func (m *jobData) Type() string {
	return "JobData"
}

// SetType sets the type of this polymorphic type
func (m *jobData) SetType(val string) {
}

// Value gets the value of this polymorphic type
func (m *jobData) Value() interface{} {
	return m.valueField
}

// SetValue sets the value of this polymorphic type
func (m *jobData) SetValue(val interface{}) {
	m.valueField = val
}

// UnmarshalJobDataSlice unmarshals polymorphic slices of JobData
func UnmarshalJobDataSlice(reader io.Reader, consumer runtime.Consumer) ([]JobData, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []JobData
	for _, element := range elements {
		obj, err := unmarshalJobData(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalJobData unmarshals polymorphic JobData
func UnmarshalJobData(reader io.Reader, consumer runtime.Consumer) (JobData, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalJobData(data, consumer)
}

func unmarshalJobData(data []byte, consumer runtime.Consumer) (JobData, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "CloudPropertyJobData":
		var result CloudPropertyJobData
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CommandJobData":
		var result CommandJobData
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "JobData":
		var result jobData
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "PropertyJobData":
		var result PropertyJobData
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this job data
func (m *jobData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *jobData) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path()); err != nil {
		return err
	}

	return nil
}

func (m *jobData) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target()); err != nil {
		return err
	}

	return nil
}
