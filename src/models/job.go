// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Job job
//
// swagger:model Job
type Job struct {
	dataField []JobData

	// Detailed description of the job.
	Description string `json:"description,omitempty"`

	// Display name of the job.
	DisplayName string `json:"displayName,omitempty"`

	// The ID of the device group on which to execute the job.
	// Required: true
	Group *string `json:"group"`

	// Unique ID of the job.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// Indicates whether the job is starting, running, etc.
	// Read Only: true
	Status string `json:"status,omitempty"`
}

// Data gets the data of this base type
func (m *Job) Data() []JobData {
	return m.dataField
}

// SetData sets the data of this base type
func (m *Job) SetData(val []JobData) {
	m.dataField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Job) UnmarshalJSON(raw []byte) error {
	var data struct {
		Data json.RawMessage `json:"data"`

		Description string `json:"description,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		Group *string `json:"group"`

		ID string `json:"id,omitempty"`

		Status string `json:"status,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propData, err := UnmarshalJobDataSlice(bytes.NewBuffer(data.Data), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result Job

	// data
	result.dataField = propData

	// description
	result.Description = data.Description

	// displayName
	result.DisplayName = data.DisplayName

	// group
	result.Group = data.Group

	// id
	result.ID = data.ID

	// status
	result.Status = data.Status

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Job) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Description string `json:"description,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		Group *string `json:"group"`

		ID string `json:"id,omitempty"`

		Status string `json:"status,omitempty"`
	}{

		Description: m.Description,

		DisplayName: m.DisplayName,

		Group: m.Group,

		ID: m.ID,

		Status: m.Status,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Data []JobData `json:"data"`
	}{

		Data: m.dataField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this job
func (m *Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Job) validateData(formats strfmt.Registry) error {

	if err := validate.Required("data", "body", m.Data()); err != nil {
		return err
	}

	iDataSize := int64(len(m.Data()))

	if err := validate.MinItems("data", "body", iDataSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Data()); i++ {

		if err := m.dataField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Job) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Job) UnmarshalBinary(b []byte) error {
	var res Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
