// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebhookActionBody webhook action body
//
// swagger:model WebhookActionBody
type WebhookActionBody struct {
	actionField Action

	// Application that triggered the webhook.
	// Required: true
	Application *Application `json:"application"`

	// Device that triggered the webhook.
	// Required: true
	Device *WebhookActionDevice `json:"device"`

	// Rule that triggered the webhook.
	// Required: true
	Rule *Rule `json:"rule"`

	// Timestamp at which the webhook was triggered.
	// Required: true
	// Format: date-time
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Action gets the action of this base type
func (m *WebhookActionBody) Action() Action {
	return m.actionField
}

// SetAction sets the action of this base type
func (m *WebhookActionBody) SetAction(val Action) {
	m.actionField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *WebhookActionBody) UnmarshalJSON(raw []byte) error {
	var data struct {
		Action json.RawMessage `json:"action"`

		Application *Application `json:"application"`

		Device *WebhookActionDevice `json:"device"`

		Rule *Rule `json:"rule"`

		Timestamp *strfmt.DateTime `json:"timestamp"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propAction, err := UnmarshalAction(bytes.NewBuffer(data.Action), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result WebhookActionBody

	// action
	result.actionField = propAction

	// application
	result.Application = data.Application

	// device
	result.Device = data.Device

	// rule
	result.Rule = data.Rule

	// timestamp
	result.Timestamp = data.Timestamp

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m WebhookActionBody) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		Application *Application `json:"application"`

		Device *WebhookActionDevice `json:"device"`

		Rule *Rule `json:"rule"`

		Timestamp *strfmt.DateTime `json:"timestamp"`
	}{

		Application: m.Application,

		Device: m.Device,

		Rule: m.Rule,

		Timestamp: m.Timestamp,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Action Action `json:"action"`
	}{

		Action: m.actionField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this webhook action body
func (m *WebhookActionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebhookActionBody) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action()); err != nil {
		return err
	}

	if err := m.Action().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("action")
		}
		return err
	}

	return nil
}

func (m *WebhookActionBody) validateApplication(formats strfmt.Registry) error {

	if err := validate.Required("application", "body", m.Application); err != nil {
		return err
	}

	if m.Application != nil {
		if err := m.Application.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("application")
			}
			return err
		}
	}

	return nil
}

func (m *WebhookActionBody) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *WebhookActionBody) validateRule(formats strfmt.Registry) error {

	if err := validate.Required("rule", "body", m.Rule); err != nil {
		return err
	}

	if m.Rule != nil {
		if err := m.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rule")
			}
			return err
		}
	}

	return nil
}

func (m *WebhookActionBody) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WebhookActionBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebhookActionBody) UnmarshalBinary(b []byte) error {
	var res WebhookActionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
