// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceBusQueueEndpoint service bus queue endpoint
//
// swagger:model ServiceBusQueueEndpoint
type ServiceBusQueueEndpoint struct {
	connectionStringField *string

	nameField *string
}

// ConnectionString gets the connection string of this subtype
func (m *ServiceBusQueueEndpoint) ConnectionString() *string {
	return m.connectionStringField
}

// SetConnectionString sets the connection string of this subtype
func (m *ServiceBusQueueEndpoint) SetConnectionString(val *string) {
	m.connectionStringField = val
}

// Name gets the name of this subtype
func (m *ServiceBusQueueEndpoint) Name() *string {
	return m.nameField
}

// SetName sets the name of this subtype
func (m *ServiceBusQueueEndpoint) SetName(val *string) {
	m.nameField = val
}

// Type gets the type of this subtype
func (m *ServiceBusQueueEndpoint) Type() string {
	return "ServiceBusQueueEndpoint"
}

// SetType sets the type of this subtype
func (m *ServiceBusQueueEndpoint) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ServiceBusQueueEndpoint) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ConnectionString *string `json:"connectionString"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ServiceBusQueueEndpoint

	result.connectionStringField = base.ConnectionString

	result.nameField = base.Name

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ServiceBusQueueEndpoint) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ConnectionString *string `json:"connectionString"`

		Name *string `json:"name"`

		Type string `json:"type"`
	}{

		ConnectionString: m.ConnectionString(),

		Name: m.Name(),

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this service bus queue endpoint
func (m *ServiceBusQueueEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBusQueueEndpoint) validateConnectionString(formats strfmt.Registry) error {

	if err := validate.Required("connectionString", "body", m.ConnectionString()); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBusQueueEndpoint) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceBusQueueEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceBusQueueEndpoint) UnmarshalBinary(b []byte) error {
	var res ServiceBusQueueEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
