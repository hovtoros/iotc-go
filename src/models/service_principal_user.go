// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServicePrincipalUser service principal user
//
// swagger:model ServicePrincipalUser
type ServicePrincipalUser struct {
	User

	// The AAD object ID of the service principal.
	// Required: true
	ObjectID *string `json:"objectId"`

	// The AAD tenant ID of the service principal.
	// Required: true
	TenantID *string `json:"tenantId"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ServicePrincipalUser) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 User
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.User = aO0

	// AO1
	var dataAO1 struct {
		ObjectID *string `json:"objectId"`

		TenantID *string `json:"tenantId"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ObjectID = dataAO1.ObjectID

	m.TenantID = dataAO1.TenantID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ServicePrincipalUser) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ObjectID *string `json:"objectId"`

		TenantID *string `json:"tenantId"`
	}

	dataAO1.ObjectID = m.ObjectID

	dataAO1.TenantID = m.TenantID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this service principal user
func (m *ServicePrincipalUser) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with User
	if err := m.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServicePrincipalUser) validateObjectID(formats strfmt.Registry) error {

	if err := validate.Required("objectId", "body", m.ObjectID); err != nil {
		return err
	}

	return nil
}

func (m *ServicePrincipalUser) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServicePrincipalUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServicePrincipalUser) UnmarshalBinary(b []byte) error {
	var res ServicePrincipalUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
