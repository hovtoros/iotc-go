// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceCredentials device credentials
//
// swagger:model DeviceCredentials
type DeviceCredentials struct {

	// ID scope for connecting to the IoT Central application.
	// Required: true
	IDScope *string `json:"idScope"`

	// The symmetric key credentials for the device.
	SymmetricKey *SymmetricKey `json:"symmetricKey,omitempty"`

	// The TPM credentials for the device.
	Tpm *Tpm `json:"tpm,omitempty"`

	// The X.509 credential information for the device.
	X509 *X509 `json:"x509,omitempty"`
}

// Validate validates this device credentials
func (m *DeviceCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSymmetricKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTpm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateX509(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceCredentials) validateIDScope(formats strfmt.Registry) error {

	if err := validate.Required("idScope", "body", m.IDScope); err != nil {
		return err
	}

	return nil
}

func (m *DeviceCredentials) validateSymmetricKey(formats strfmt.Registry) error {

	if swag.IsZero(m.SymmetricKey) { // not required
		return nil
	}

	if m.SymmetricKey != nil {
		if err := m.SymmetricKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("symmetricKey")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceCredentials) validateTpm(formats strfmt.Registry) error {

	if swag.IsZero(m.Tpm) { // not required
		return nil
	}

	if m.Tpm != nil {
		if err := m.Tpm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tpm")
			}
			return err
		}
	}

	return nil
}

func (m *DeviceCredentials) validateX509(formats strfmt.Registry) error {

	if swag.IsZero(m.X509) { // not required
		return nil
	}

	if m.X509 != nil {
		if err := m.X509.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x509")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceCredentials) UnmarshalBinary(b []byte) error {
	var res DeviceCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
