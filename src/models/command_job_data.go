// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommandJobData command job data
//
// swagger:model CommandJobData
type CommandJobData struct {
	pathField *string

	targetField *string

	valueField interface{}
}

// Path gets the path of this subtype
func (m *CommandJobData) Path() *string {
	return m.pathField
}

// SetPath sets the path of this subtype
func (m *CommandJobData) SetPath(val *string) {
	m.pathField = val
}

// Target gets the target of this subtype
func (m *CommandJobData) Target() *string {
	return m.targetField
}

// SetTarget sets the target of this subtype
func (m *CommandJobData) SetTarget(val *string) {
	m.targetField = val
}

// Type gets the type of this subtype
func (m *CommandJobData) Type() string {
	return "CommandJobData"
}

// SetType sets the type of this subtype
func (m *CommandJobData) SetType(val string) {
}

// Value gets the value of this subtype
func (m *CommandJobData) Value() interface{} {
	return m.valueField
}

// SetValue sets the value of this subtype
func (m *CommandJobData) SetValue(val interface{}) {
	m.valueField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CommandJobData) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Path *string `json:"path"`

		Target *string `json:"target"`

		Type string `json:"type"`

		Value interface{} `json:"value,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result CommandJobData

	result.pathField = base.Path

	result.targetField = base.Target

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}
	result.valueField = base.Value

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CommandJobData) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Path *string `json:"path"`

		Target *string `json:"target"`

		Type string `json:"type"`

		Value interface{} `json:"value,omitempty"`
	}{

		Path: m.Path(),

		Target: m.Target(),

		Type: m.Type(),

		Value: m.Value(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this command job data
func (m *CommandJobData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommandJobData) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path()); err != nil {
		return err
	}

	return nil
}

func (m *CommandJobData) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommandJobData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommandJobData) UnmarshalBinary(b []byte) error {
	var res CommandJobData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
