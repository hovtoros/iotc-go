// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceTemplate device template
//
// swagger:model DeviceTemplate
type DeviceTemplate struct {

	// The capability model utilized by this device template.
	// Required: true
	CapabilityModel interface{} `json:"capabilityModel"`

	// Detailed description of the device template.
	Description string `json:"description,omitempty"`

	// Display name of the device template.
	DisplayName string `json:"displayName,omitempty"`

	// ETag used to prevent conflict in device template updates.
	Etag string `json:"etag,omitempty"`

	// Unique ID of the device template.
	// Read Only: true
	ID string `json:"id,omitempty"`

	// The solution model utilized by this device template.
	SolutionModel interface{} `json:"solutionModel,omitempty"`

	// The types of device to which this template applies.
	// Required: true
	Types []string `json:"types"`
}

// Validate validates this device template
func (m *DeviceTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapabilityModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceTemplate) validateCapabilityModel(formats strfmt.Registry) error {

	if err := validate.Required("capabilityModel", "body", m.CapabilityModel); err != nil {
		return err
	}

	return nil
}

func (m *DeviceTemplate) validateTypes(formats strfmt.Registry) error {

	if err := validate.Required("types", "body", m.Types); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceTemplate) UnmarshalBinary(b []byte) error {
	var res DeviceTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
