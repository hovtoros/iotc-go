// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"com.azure.iot/iotcentral/iotcgo/models"
)

// NewDevicesExecuteModuleCommandParams creates a new DevicesExecuteModuleCommandParams object
// with the default values initialized.
func NewDevicesExecuteModuleCommandParams() *DevicesExecuteModuleCommandParams {
	var ()
	return &DevicesExecuteModuleCommandParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDevicesExecuteModuleCommandParamsWithTimeout creates a new DevicesExecuteModuleCommandParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDevicesExecuteModuleCommandParamsWithTimeout(timeout time.Duration) *DevicesExecuteModuleCommandParams {
	var ()
	return &DevicesExecuteModuleCommandParams{

		timeout: timeout,
	}
}

// NewDevicesExecuteModuleCommandParamsWithContext creates a new DevicesExecuteModuleCommandParams object
// with the default values initialized, and the ability to set a context for a request
func NewDevicesExecuteModuleCommandParamsWithContext(ctx context.Context) *DevicesExecuteModuleCommandParams {
	var ()
	return &DevicesExecuteModuleCommandParams{

		Context: ctx,
	}
}

// NewDevicesExecuteModuleCommandParamsWithHTTPClient creates a new DevicesExecuteModuleCommandParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDevicesExecuteModuleCommandParamsWithHTTPClient(client *http.Client) *DevicesExecuteModuleCommandParams {
	var ()
	return &DevicesExecuteModuleCommandParams{
		HTTPClient: client,
	}
}

/*DevicesExecuteModuleCommandParams contains all the parameters to send to the API endpoint
for the devices execute module command operation typically these are written to a http.Request
*/
type DevicesExecuteModuleCommandParams struct {

	/*Body
	  Device command body.

	*/
	Body *models.DeviceCommand
	/*CommandName
	  Name of this device command.

	*/
	CommandName string
	/*DeviceID
	  Unique ID of the device.

	*/
	DeviceID string
	/*ModuleName
	  Name of the device module.

	*/
	ModuleName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithTimeout(timeout time.Duration) *DevicesExecuteModuleCommandParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithContext(ctx context.Context) *DevicesExecuteModuleCommandParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithHTTPClient(client *http.Client) *DevicesExecuteModuleCommandParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithBody(body *models.DeviceCommand) *DevicesExecuteModuleCommandParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetBody(body *models.DeviceCommand) {
	o.Body = body
}

// WithCommandName adds the commandName to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithCommandName(commandName string) *DevicesExecuteModuleCommandParams {
	o.SetCommandName(commandName)
	return o
}

// SetCommandName adds the commandName to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetCommandName(commandName string) {
	o.CommandName = commandName
}

// WithDeviceID adds the deviceID to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithDeviceID(deviceID string) *DevicesExecuteModuleCommandParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WithModuleName adds the moduleName to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) WithModuleName(moduleName string) *DevicesExecuteModuleCommandParams {
	o.SetModuleName(moduleName)
	return o
}

// SetModuleName adds the moduleName to the devices execute module command params
func (o *DevicesExecuteModuleCommandParams) SetModuleName(moduleName string) {
	o.ModuleName = moduleName
}

// WriteToRequest writes these params to a swagger request
func (o *DevicesExecuteModuleCommandParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param command_name
	if err := r.SetPathParam("command_name", o.CommandName); err != nil {
		return err
	}

	// path param device_id
	if err := r.SetPathParam("device_id", o.DeviceID); err != nil {
		return err
	}

	// path param module_name
	if err := r.SetPathParam("module_name", o.ModuleName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
