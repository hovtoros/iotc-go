// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewContinuousDataExportsRemoveParams creates a new ContinuousDataExportsRemoveParams object
// with the default values initialized.
func NewContinuousDataExportsRemoveParams() *ContinuousDataExportsRemoveParams {
	var ()
	return &ContinuousDataExportsRemoveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewContinuousDataExportsRemoveParamsWithTimeout creates a new ContinuousDataExportsRemoveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewContinuousDataExportsRemoveParamsWithTimeout(timeout time.Duration) *ContinuousDataExportsRemoveParams {
	var ()
	return &ContinuousDataExportsRemoveParams{

		timeout: timeout,
	}
}

// NewContinuousDataExportsRemoveParamsWithContext creates a new ContinuousDataExportsRemoveParams object
// with the default values initialized, and the ability to set a context for a request
func NewContinuousDataExportsRemoveParamsWithContext(ctx context.Context) *ContinuousDataExportsRemoveParams {
	var ()
	return &ContinuousDataExportsRemoveParams{

		Context: ctx,
	}
}

// NewContinuousDataExportsRemoveParamsWithHTTPClient creates a new ContinuousDataExportsRemoveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewContinuousDataExportsRemoveParamsWithHTTPClient(client *http.Client) *ContinuousDataExportsRemoveParams {
	var ()
	return &ContinuousDataExportsRemoveParams{
		HTTPClient: client,
	}
}

/*ContinuousDataExportsRemoveParams contains all the parameters to send to the API endpoint
for the continuous data exports remove operation typically these are written to a http.Request
*/
type ContinuousDataExportsRemoveParams struct {

	/*ExportID
	  Unique ID for the continuous data export.

	*/
	ExportID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) WithTimeout(timeout time.Duration) *ContinuousDataExportsRemoveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) WithContext(ctx context.Context) *ContinuousDataExportsRemoveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) WithHTTPClient(client *http.Client) *ContinuousDataExportsRemoveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExportID adds the exportID to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) WithExportID(exportID string) *ContinuousDataExportsRemoveParams {
	o.SetExportID(exportID)
	return o
}

// SetExportID adds the exportId to the continuous data exports remove params
func (o *ContinuousDataExportsRemoveParams) SetExportID(exportID string) {
	o.ExportID = exportID
}

// WriteToRequest writes these params to a swagger request
func (o *ContinuousDataExportsRemoveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param export_id
	if err := r.SetPathParam("export_id", o.ExportID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
