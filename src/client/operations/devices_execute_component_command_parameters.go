// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"com.azure.iot/iotcentral/iotcgo/models"
)

// NewDevicesExecuteComponentCommandParams creates a new DevicesExecuteComponentCommandParams object
// with the default values initialized.
func NewDevicesExecuteComponentCommandParams() *DevicesExecuteComponentCommandParams {
	var ()
	return &DevicesExecuteComponentCommandParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDevicesExecuteComponentCommandParamsWithTimeout creates a new DevicesExecuteComponentCommandParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDevicesExecuteComponentCommandParamsWithTimeout(timeout time.Duration) *DevicesExecuteComponentCommandParams {
	var ()
	return &DevicesExecuteComponentCommandParams{

		timeout: timeout,
	}
}

// NewDevicesExecuteComponentCommandParamsWithContext creates a new DevicesExecuteComponentCommandParams object
// with the default values initialized, and the ability to set a context for a request
func NewDevicesExecuteComponentCommandParamsWithContext(ctx context.Context) *DevicesExecuteComponentCommandParams {
	var ()
	return &DevicesExecuteComponentCommandParams{

		Context: ctx,
	}
}

// NewDevicesExecuteComponentCommandParamsWithHTTPClient creates a new DevicesExecuteComponentCommandParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDevicesExecuteComponentCommandParamsWithHTTPClient(client *http.Client) *DevicesExecuteComponentCommandParams {
	var ()
	return &DevicesExecuteComponentCommandParams{
		HTTPClient: client,
	}
}

/*DevicesExecuteComponentCommandParams contains all the parameters to send to the API endpoint
for the devices execute component command operation typically these are written to a http.Request
*/
type DevicesExecuteComponentCommandParams struct {

	/*Body
	  Device command body.

	*/
	Body *models.DeviceCommand
	/*CommandName
	  Name of this device command.

	*/
	CommandName string
	/*ComponentName
	  Name of the device component.

	*/
	ComponentName string
	/*DeviceID
	  Unique ID of the device.

	*/
	DeviceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithTimeout(timeout time.Duration) *DevicesExecuteComponentCommandParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithContext(ctx context.Context) *DevicesExecuteComponentCommandParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithHTTPClient(client *http.Client) *DevicesExecuteComponentCommandParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithBody(body *models.DeviceCommand) *DevicesExecuteComponentCommandParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetBody(body *models.DeviceCommand) {
	o.Body = body
}

// WithCommandName adds the commandName to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithCommandName(commandName string) *DevicesExecuteComponentCommandParams {
	o.SetCommandName(commandName)
	return o
}

// SetCommandName adds the commandName to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetCommandName(commandName string) {
	o.CommandName = commandName
}

// WithComponentName adds the componentName to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithComponentName(componentName string) *DevicesExecuteComponentCommandParams {
	o.SetComponentName(componentName)
	return o
}

// SetComponentName adds the componentName to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetComponentName(componentName string) {
	o.ComponentName = componentName
}

// WithDeviceID adds the deviceID to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) WithDeviceID(deviceID string) *DevicesExecuteComponentCommandParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the devices execute component command params
func (o *DevicesExecuteComponentCommandParams) SetDeviceID(deviceID string) {
	o.DeviceID = deviceID
}

// WriteToRequest writes these params to a swagger request
func (o *DevicesExecuteComponentCommandParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param command_name
	if err := r.SetPathParam("command_name", o.CommandName); err != nil {
		return err
	}

	// path param component_name
	if err := r.SetPathParam("component_name", o.ComponentName); err != nil {
		return err
	}

	// path param device_id
	if err := r.SetPathParam("device_id", o.DeviceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
