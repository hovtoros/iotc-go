// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ActionsGet(params *ActionsGetParams) (*ActionsGetOK, error)

	ActionsList(params *ActionsListParams) (*ActionsListOK, error)

	ActionsRemove(params *ActionsRemoveParams) (*ActionsRemoveNoContent, error)

	ActionsSet(params *ActionsSetParams) (*ActionsSetOK, error)

	APITokensGet(params *APITokensGetParams) (*APITokensGetOK, error)

	APITokensList(params *APITokensListParams) (*APITokensListOK, error)

	APITokensRemove(params *APITokensRemoveParams) (*APITokensRemoveNoContent, error)

	APITokensSet(params *APITokensSetParams) (*APITokensSetOK, error)

	ContinuousDataExportsGet(params *ContinuousDataExportsGetParams) (*ContinuousDataExportsGetOK, error)

	ContinuousDataExportsList(params *ContinuousDataExportsListParams) (*ContinuousDataExportsListOK, error)

	ContinuousDataExportsRemove(params *ContinuousDataExportsRemoveParams) (*ContinuousDataExportsRemoveNoContent, error)

	ContinuousDataExportsSet(params *ContinuousDataExportsSetParams) (*ContinuousDataExportsSetOK, error)

	DeviceGroupsList(params *DeviceGroupsListParams) (*DeviceGroupsListOK, error)

	DeviceTemplatesGet(params *DeviceTemplatesGetParams) (*DeviceTemplatesGetOK, error)

	DeviceTemplatesGetMerged(params *DeviceTemplatesGetMergedParams) (*DeviceTemplatesGetMergedOK, error)

	DeviceTemplatesList(params *DeviceTemplatesListParams) (*DeviceTemplatesListOK, error)

	DeviceTemplatesListDevices(params *DeviceTemplatesListDevicesParams) (*DeviceTemplatesListDevicesOK, error)

	DeviceTemplatesRemove(params *DeviceTemplatesRemoveParams) (*DeviceTemplatesRemoveNoContent, error)

	DeviceTemplatesSet(params *DeviceTemplatesSetParams) (*DeviceTemplatesSetOK, error)

	DevicesExecuteCommand(params *DevicesExecuteCommandParams) (*DevicesExecuteCommandCreated, error)

	DevicesExecuteComponentCommand(params *DevicesExecuteComponentCommandParams) (*DevicesExecuteComponentCommandCreated, error)

	DevicesExecuteModuleCommand(params *DevicesExecuteModuleCommandParams) (*DevicesExecuteModuleCommandCreated, error)

	DevicesExecuteModuleComponentCommand(params *DevicesExecuteModuleComponentCommandParams) (*DevicesExecuteModuleComponentCommandCreated, error)

	DevicesGet(params *DevicesGetParams) (*DevicesGetOK, error)

	DevicesGetAttestation(params *DevicesGetAttestationParams) (*DevicesGetAttestationOK, error)

	DevicesGetCloudProperties(params *DevicesGetCloudPropertiesParams) (*DevicesGetCloudPropertiesOK, error)

	DevicesGetCommandHistory(params *DevicesGetCommandHistoryParams) (*DevicesGetCommandHistoryOK, error)

	DevicesGetComponent(params *DevicesGetComponentParams) (*DevicesGetComponentOK, error)

	DevicesGetComponentCommandHistory(params *DevicesGetComponentCommandHistoryParams) (*DevicesGetComponentCommandHistoryOK, error)

	DevicesGetComponentProperties(params *DevicesGetComponentPropertiesParams) (*DevicesGetComponentPropertiesOK, error)

	DevicesGetComponentTelemetryValue(params *DevicesGetComponentTelemetryValueParams) (*DevicesGetComponentTelemetryValueOK, error)

	DevicesGetCredentials(params *DevicesGetCredentialsParams) (*DevicesGetCredentialsOK, error)

	DevicesGetModule(params *DevicesGetModuleParams) (*DevicesGetModuleOK, error)

	DevicesGetModuleCommandHistory(params *DevicesGetModuleCommandHistoryParams) (*DevicesGetModuleCommandHistoryOK, error)

	DevicesGetModuleComponent(params *DevicesGetModuleComponentParams) (*DevicesGetModuleComponentOK, error)

	DevicesGetModuleComponentCommandHistory(params *DevicesGetModuleComponentCommandHistoryParams) (*DevicesGetModuleComponentCommandHistoryOK, error)

	DevicesGetModuleComponentProperties(params *DevicesGetModuleComponentPropertiesParams) (*DevicesGetModuleComponentPropertiesOK, error)

	DevicesGetModuleComponentTelemetryValue(params *DevicesGetModuleComponentTelemetryValueParams) (*DevicesGetModuleComponentTelemetryValueOK, error)

	DevicesGetModuleProperties(params *DevicesGetModulePropertiesParams) (*DevicesGetModulePropertiesOK, error)

	DevicesGetModuleTelemetryValue(params *DevicesGetModuleTelemetryValueParams) (*DevicesGetModuleTelemetryValueOK, error)

	DevicesGetProperties(params *DevicesGetPropertiesParams) (*DevicesGetPropertiesOK, error)

	DevicesGetTelemetryValue(params *DevicesGetTelemetryValueParams) (*DevicesGetTelemetryValueOK, error)

	DevicesList(params *DevicesListParams) (*DevicesListOK, error)

	DevicesListComponents(params *DevicesListComponentsParams) (*DevicesListComponentsOK, error)

	DevicesListModuleComponents(params *DevicesListModuleComponentsParams) (*DevicesListModuleComponentsOK, error)

	DevicesListModules(params *DevicesListModulesParams) (*DevicesListModulesOK, error)

	DevicesRemove(params *DevicesRemoveParams) (*DevicesRemoveNoContent, error)

	DevicesRemoveAttestation(params *DevicesRemoveAttestationParams) (*DevicesRemoveAttestationNoContent, error)

	DevicesSet(params *DevicesSetParams) (*DevicesSetOK, error)

	DevicesSetAttestation(params *DevicesSetAttestationParams) (*DevicesSetAttestationOK, error)

	DevicesUpdateCloudProperties(params *DevicesUpdateCloudPropertiesParams) (*DevicesUpdateCloudPropertiesOK, error)

	DevicesUpdateComponentProperties(params *DevicesUpdateComponentPropertiesParams) (*DevicesUpdateComponentPropertiesAccepted, error)

	DevicesUpdateModuleComponentProperties(params *DevicesUpdateModuleComponentPropertiesParams) (*DevicesUpdateModuleComponentPropertiesAccepted, error)

	DevicesUpdateModuleProperties(params *DevicesUpdateModulePropertiesParams) (*DevicesUpdateModulePropertiesAccepted, error)

	DevicesUpdateProperties(params *DevicesUpdatePropertiesParams) (*DevicesUpdatePropertiesAccepted, error)

	JobsGet(params *JobsGetParams) (*JobsGetOK, error)

	JobsGetDevices(params *JobsGetDevicesParams) (*JobsGetDevicesOK, error)

	JobsList(params *JobsListParams) (*JobsListOK, error)

	JobsRerun(params *JobsRerunParams) (*JobsRerunOK, error)

	JobsResume(params *JobsResumeParams) (*JobsResumeNoContent, error)

	JobsSet(params *JobsSetParams) (*JobsSetOK, error)

	JobsStop(params *JobsStopParams) (*JobsStopNoContent, error)

	RolesGet(params *RolesGetParams) (*RolesGetOK, error)

	RolesList(params *RolesListParams) (*RolesListOK, error)

	RulesGet(params *RulesGetParams) (*RulesGetOK, error)

	RulesList(params *RulesListParams) (*RulesListOK, error)

	UsersGet(params *UsersGetParams) (*UsersGetOK, error)

	UsersList(params *UsersListParams) (*UsersListOK, error)

	UsersRemove(params *UsersRemoveParams) (*UsersRemoveNoContent, error)

	UsersSet(params *UsersSetParams) (*UsersSetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActionsGet gets an action by ID
*/
func (a *Client) ActionsGet(params *ActionsGetParams) (*ActionsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_Get",
		Method:             "GET",
		PathPattern:        "/actions/{action_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActionsList gets the list of actions in an application
*/
func (a *Client) ActionsList(params *ActionsListParams) (*ActionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_List",
		Method:             "GET",
		PathPattern:        "/actions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActionsRemove deletes an action
*/
func (a *Client) ActionsRemove(params *ActionsRemoveParams) (*ActionsRemoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_Remove",
		Method:             "DELETE",
		PathPattern:        "/actions/{action_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsRemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsRemoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_Remove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ActionsSet creates or update an action

  Create an action which triggers when a rule is fired in IoT Central.
*/
func (a *Client) ActionsSet(params *ActionsSetParams) (*ActionsSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionsSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Actions_Set",
		Method:             "PUT",
		PathPattern:        "/actions/{action_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionsSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionsSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Actions_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APITokensGet gets an API token by ID
*/
func (a *Client) APITokensGet(params *APITokensGetParams) (*APITokensGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITokensGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiTokens_Get",
		Method:             "GET",
		PathPattern:        "/apiTokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APITokensGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APITokensGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApiTokens_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APITokensList gets the list of API tokens in an application the token value will never be returned for security reasons
*/
func (a *Client) APITokensList(params *APITokensListParams) (*APITokensListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITokensListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiTokens_List",
		Method:             "GET",
		PathPattern:        "/apiTokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APITokensListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APITokensListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApiTokens_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APITokensRemove deletes an API token
*/
func (a *Client) APITokensRemove(params *APITokensRemoveParams) (*APITokensRemoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITokensRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiTokens_Remove",
		Method:             "DELETE",
		PathPattern:        "/apiTokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APITokensRemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APITokensRemoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApiTokens_Remove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  APITokensSet creates a new API token in the application to use in the io t central public API the token value will be returned in the response and won t be returned again in subsequent requests
*/
func (a *Client) APITokensSet(params *APITokensSetParams) (*APITokensSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITokensSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ApiTokens_Set",
		Method:             "PUT",
		PathPattern:        "/apiTokens/{token_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &APITokensSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*APITokensSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ApiTokens_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContinuousDataExportsGet gets a continuous data export by ID
*/
func (a *Client) ContinuousDataExportsGet(params *ContinuousDataExportsGetParams) (*ContinuousDataExportsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContinuousDataExportsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContinuousDataExports_Get",
		Method:             "GET",
		PathPattern:        "/continuousDataExports/{export_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContinuousDataExportsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContinuousDataExportsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContinuousDataExports_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContinuousDataExportsList gets the list of continuous data exports in an application
*/
func (a *Client) ContinuousDataExportsList(params *ContinuousDataExportsListParams) (*ContinuousDataExportsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContinuousDataExportsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContinuousDataExports_List",
		Method:             "GET",
		PathPattern:        "/continuousDataExports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContinuousDataExportsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContinuousDataExportsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContinuousDataExports_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContinuousDataExportsRemove deletes a continuous data export
*/
func (a *Client) ContinuousDataExportsRemove(params *ContinuousDataExportsRemoveParams) (*ContinuousDataExportsRemoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContinuousDataExportsRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContinuousDataExports_Remove",
		Method:             "DELETE",
		PathPattern:        "/continuousDataExports/{export_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContinuousDataExportsRemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContinuousDataExportsRemoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContinuousDataExports_Remove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ContinuousDataExportsSet creates a new continuous data export or update an existing one by ID
*/
func (a *Client) ContinuousDataExportsSet(params *ContinuousDataExportsSetParams) (*ContinuousDataExportsSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewContinuousDataExportsSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ContinuousDataExports_Set",
		Method:             "PUT",
		PathPattern:        "/continuousDataExports/{export_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ContinuousDataExportsSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ContinuousDataExportsSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ContinuousDataExports_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceGroupsList gets the list of device groups in an application
*/
func (a *Client) DeviceGroupsList(params *DeviceGroupsListParams) (*DeviceGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceGroups_List",
		Method:             "GET",
		PathPattern:        "/deviceGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceGroupsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceGroupsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceGroups_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceTemplatesGet gets a device template by ID
*/
func (a *Client) DeviceTemplatesGet(params *DeviceTemplatesGetParams) (*DeviceTemplatesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceTemplatesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceTemplates_Get",
		Method:             "GET",
		PathPattern:        "/deviceTemplates/{device_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceTemplatesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceTemplatesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceTemplates_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceTemplatesGetMerged gets a merged device template by ID
*/
func (a *Client) DeviceTemplatesGetMerged(params *DeviceTemplatesGetMergedParams) (*DeviceTemplatesGetMergedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceTemplatesGetMergedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceTemplates_GetMerged",
		Method:             "GET",
		PathPattern:        "/deviceTemplates/{device_template_id}/merged",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceTemplatesGetMergedReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceTemplatesGetMergedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceTemplates_GetMerged: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceTemplatesList gets the list of device templates in an application
*/
func (a *Client) DeviceTemplatesList(params *DeviceTemplatesListParams) (*DeviceTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceTemplates_List",
		Method:             "GET",
		PathPattern:        "/deviceTemplates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceTemplatesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceTemplatesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceTemplates_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceTemplatesListDevices gets devices for a template
*/
func (a *Client) DeviceTemplatesListDevices(params *DeviceTemplatesListDevicesParams) (*DeviceTemplatesListDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceTemplatesListDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceTemplates_ListDevices",
		Method:             "GET",
		PathPattern:        "/deviceTemplates/{device_template_id}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceTemplatesListDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceTemplatesListDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceTemplates_ListDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceTemplatesRemove deletes a device template

  Delete an existing device template by device ID.
*/
func (a *Client) DeviceTemplatesRemove(params *DeviceTemplatesRemoveParams) (*DeviceTemplatesRemoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceTemplatesRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceTemplates_Remove",
		Method:             "DELETE",
		PathPattern:        "/deviceTemplates/{device_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceTemplatesRemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceTemplatesRemoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceTemplates_Remove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeviceTemplatesSet publishes a new device template or update the cloud properties and overrides of an existing device template default views will be automatically generated for new device templates created this way
*/
func (a *Client) DeviceTemplatesSet(params *DeviceTemplatesSetParams) (*DeviceTemplatesSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeviceTemplatesSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeviceTemplates_Set",
		Method:             "PUT",
		PathPattern:        "/deviceTemplates/{device_template_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeviceTemplatesSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeviceTemplatesSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeviceTemplates_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesExecuteCommand executes a device command

  Execute a command on a device.
*/
func (a *Client) DevicesExecuteCommand(params *DevicesExecuteCommandParams) (*DevicesExecuteCommandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesExecuteCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ExecuteCommand",
		Method:             "POST",
		PathPattern:        "/devices/{device_id}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesExecuteCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesExecuteCommandCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ExecuteCommand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesExecuteComponentCommand executes a component command

  Execute a command on a component.
*/
func (a *Client) DevicesExecuteComponentCommand(params *DevicesExecuteComponentCommandParams) (*DevicesExecuteComponentCommandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesExecuteComponentCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ExecuteComponentCommand",
		Method:             "POST",
		PathPattern:        "/devices/{device_id}/components/{component_name}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesExecuteComponentCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesExecuteComponentCommandCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ExecuteComponentCommand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesExecuteModuleCommand executes a module command

  Execute a command on a module.
*/
func (a *Client) DevicesExecuteModuleCommand(params *DevicesExecuteModuleCommandParams) (*DevicesExecuteModuleCommandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesExecuteModuleCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ExecuteModuleCommand",
		Method:             "POST",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesExecuteModuleCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesExecuteModuleCommandCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ExecuteModuleCommand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesExecuteModuleComponentCommand executes a module component command

  Execute a command on a module.
*/
func (a *Client) DevicesExecuteModuleComponentCommand(params *DevicesExecuteModuleComponentCommandParams) (*DevicesExecuteModuleComponentCommandCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesExecuteModuleComponentCommandParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ExecuteModuleComponentCommand",
		Method:             "POST",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components/{component_name}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesExecuteModuleComponentCommandReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesExecuteModuleComponentCommandCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ExecuteModuleComponentCommand: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGet gets a device by ID

  Get details about an existing device by device ID.
*/
func (a *Client) DevicesGet(params *DevicesGetParams) (*DevicesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_Get",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetAttestation gets device attestation
*/
func (a *Client) DevicesGetAttestation(params *DevicesGetAttestationParams) (*DevicesGetAttestationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetAttestationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetAttestation",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/attestation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetAttestationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetAttestationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetAttestation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetCloudProperties gets device cloud properties

  Get all cloud property values of a device by device ID.
*/
func (a *Client) DevicesGetCloudProperties(params *DevicesGetCloudPropertiesParams) (*DevicesGetCloudPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetCloudPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetCloudProperties",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/cloudProperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetCloudPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetCloudPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetCloudProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetCommandHistory gets device command history
*/
func (a *Client) DevicesGetCommandHistory(params *DevicesGetCommandHistoryParams) (*DevicesGetCommandHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetCommandHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetCommandHistory",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetCommandHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetCommandHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetCommandHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetComponent gets a component present in a device
*/
func (a *Client) DevicesGetComponent(params *DevicesGetComponentParams) (*DevicesGetComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetComponent",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/components/{component_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetComponentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetComponentCommandHistory gets component command history
*/
func (a *Client) DevicesGetComponentCommandHistory(params *DevicesGetComponentCommandHistoryParams) (*DevicesGetComponentCommandHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetComponentCommandHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetComponentCommandHistory",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/components/{component_name}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetComponentCommandHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetComponentCommandHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetComponentCommandHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetComponentProperties gets device properties for a specific component
*/
func (a *Client) DevicesGetComponentProperties(params *DevicesGetComponentPropertiesParams) (*DevicesGetComponentPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetComponentPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetComponentProperties",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/components/{component_name}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetComponentPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetComponentPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetComponentProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetComponentTelemetryValue gets component telemetry value

  Get the last telemetry value from a component.
*/
func (a *Client) DevicesGetComponentTelemetryValue(params *DevicesGetComponentTelemetryValueParams) (*DevicesGetComponentTelemetryValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetComponentTelemetryValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetComponentTelemetryValue",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/components/{component_name}/telemetry/{telemetry_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetComponentTelemetryValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetComponentTelemetryValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetComponentTelemetryValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetCredentials gets device credentials
*/
func (a *Client) DevicesGetCredentials(params *DevicesGetCredentialsParams) (*DevicesGetCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetCredentials",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModule gets a module present in a device
*/
func (a *Client) DevicesGetModule(params *DevicesGetModuleParams) (*DevicesGetModuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModule",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleCommandHistory gets module command history
*/
func (a *Client) DevicesGetModuleCommandHistory(params *DevicesGetModuleCommandHistoryParams) (*DevicesGetModuleCommandHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleCommandHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleCommandHistory",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleCommandHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleCommandHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleCommandHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleComponent gets a component present in a module
*/
func (a *Client) DevicesGetModuleComponent(params *DevicesGetModuleComponentParams) (*DevicesGetModuleComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleComponent",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components/{component_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleComponentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleComponentCommandHistory gets module component command history
*/
func (a *Client) DevicesGetModuleComponentCommandHistory(params *DevicesGetModuleComponentCommandHistoryParams) (*DevicesGetModuleComponentCommandHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleComponentCommandHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleComponentCommandHistory",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components/{component_name}/commands/{command_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleComponentCommandHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleComponentCommandHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleComponentCommandHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleComponentProperties gets module properties for a specific component
*/
func (a *Client) DevicesGetModuleComponentProperties(params *DevicesGetModuleComponentPropertiesParams) (*DevicesGetModuleComponentPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleComponentPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleComponentProperties",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components/{component_name}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleComponentPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleComponentPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleComponentProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleComponentTelemetryValue gets module component telemetry value

  Get the last telemetry value from a module component.
*/
func (a *Client) DevicesGetModuleComponentTelemetryValue(params *DevicesGetModuleComponentTelemetryValueParams) (*DevicesGetModuleComponentTelemetryValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleComponentTelemetryValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleComponentTelemetryValue",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components/{component_name}/telemetry/{telemetry_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleComponentTelemetryValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleComponentTelemetryValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleComponentTelemetryValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleProperties gets module properties

  Get all property values of a module.
*/
func (a *Client) DevicesGetModuleProperties(params *DevicesGetModulePropertiesParams) (*DevicesGetModulePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModulePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleProperties",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModulePropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModulePropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetModuleTelemetryValue gets module telemetry value

  Get the last telemetry value from a module.
*/
func (a *Client) DevicesGetModuleTelemetryValue(params *DevicesGetModuleTelemetryValueParams) (*DevicesGetModuleTelemetryValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetModuleTelemetryValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetModuleTelemetryValue",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/telemetry/{telemetry_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetModuleTelemetryValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetModuleTelemetryValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetModuleTelemetryValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetProperties gets device properties

  Get all property values of a device by device ID.
*/
func (a *Client) DevicesGetProperties(params *DevicesGetPropertiesParams) (*DevicesGetPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetProperties",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesGetTelemetryValue gets device telemetry value

  Get the last telemetry value from a device.
*/
func (a *Client) DevicesGetTelemetryValue(params *DevicesGetTelemetryValueParams) (*DevicesGetTelemetryValueOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesGetTelemetryValueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_GetTelemetryValue",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/telemetry/{telemetry_name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesGetTelemetryValueReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesGetTelemetryValueOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_GetTelemetryValue: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesList gets the list of devices in an application
*/
func (a *Client) DevicesList(params *DevicesListParams) (*DevicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_List",
		Method:             "GET",
		PathPattern:        "/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesListComponents lists the components present in a device
*/
func (a *Client) DevicesListComponents(params *DevicesListComponentsParams) (*DevicesListComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesListComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ListComponents",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesListComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesListComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ListComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesListModuleComponents lists the components present in a module
*/
func (a *Client) DevicesListModuleComponents(params *DevicesListModuleComponentsParams) (*DevicesListModuleComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesListModuleComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ListModuleComponents",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesListModuleComponentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesListModuleComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ListModuleComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesListModules lists the modules present in a device
*/
func (a *Client) DevicesListModules(params *DevicesListModulesParams) (*DevicesListModulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesListModulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_ListModules",
		Method:             "GET",
		PathPattern:        "/devices/{device_id}/modules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesListModulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesListModulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_ListModules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesRemove deletes a device

  Delete an existing device by device ID.
*/
func (a *Client) DevicesRemove(params *DevicesRemoveParams) (*DevicesRemoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_Remove",
		Method:             "DELETE",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesRemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesRemoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_Remove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesRemoveAttestation removes an individual device attestation
*/
func (a *Client) DevicesRemoveAttestation(params *DevicesRemoveAttestationParams) (*DevicesRemoveAttestationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesRemoveAttestationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_RemoveAttestation",
		Method:             "DELETE",
		PathPattern:        "/devices/{device_id}/attestation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesRemoveAttestationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesRemoveAttestationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_RemoveAttestation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesSet creates or update a device

  Create a new device or update an existing one by device ID.
*/
func (a *Client) DevicesSet(params *DevicesSetParams) (*DevicesSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_Set",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesSetAttestation creates or update an individual device attestation
*/
func (a *Client) DevicesSetAttestation(params *DevicesSetAttestationParams) (*DevicesSetAttestationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesSetAttestationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_SetAttestation",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/attestation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesSetAttestationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesSetAttestationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_SetAttestation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesUpdateCloudProperties updates device cloud properties

  Update all cloud property values of a device by device ID.
*/
func (a *Client) DevicesUpdateCloudProperties(params *DevicesUpdateCloudPropertiesParams) (*DevicesUpdateCloudPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesUpdateCloudPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_UpdateCloudProperties",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/cloudProperties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdateCloudPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdateCloudPropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateCloudProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesUpdateComponentProperties updates device properties for a specific component
*/
func (a *Client) DevicesUpdateComponentProperties(params *DevicesUpdateComponentPropertiesParams) (*DevicesUpdateComponentPropertiesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesUpdateComponentPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_UpdateComponentProperties",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/components/{component_name}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdateComponentPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdateComponentPropertiesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateComponentProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesUpdateModuleComponentProperties updates module properties for a specific component
*/
func (a *Client) DevicesUpdateModuleComponentProperties(params *DevicesUpdateModuleComponentPropertiesParams) (*DevicesUpdateModuleComponentPropertiesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesUpdateModuleComponentPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_UpdateModuleComponentProperties",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/components/{component_name}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdateModuleComponentPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdateModuleComponentPropertiesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateModuleComponentProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesUpdateModuleProperties updates module properties

  Update all property values of a module.
*/
func (a *Client) DevicesUpdateModuleProperties(params *DevicesUpdateModulePropertiesParams) (*DevicesUpdateModulePropertiesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesUpdateModulePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_UpdateModuleProperties",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/modules/{module_name}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdateModulePropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdateModulePropertiesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateModuleProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DevicesUpdateProperties updates device properties

  Update all property values of a device by device ID.
*/
func (a *Client) DevicesUpdateProperties(params *DevicesUpdatePropertiesParams) (*DevicesUpdatePropertiesAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDevicesUpdatePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Devices_UpdateProperties",
		Method:             "PUT",
		PathPattern:        "/devices/{device_id}/properties",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DevicesUpdatePropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DevicesUpdatePropertiesAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Devices_UpdateProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsGet gets a job by ID

  Get details about a running or completed job by job ID.
*/
func (a *Client) JobsGet(params *JobsGetParams) (*JobsGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_Get",
		Method:             "GET",
		PathPattern:        "/jobs/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsGetDevices gets device statuses

  Get the list of individual device statuses by job ID.
*/
func (a *Client) JobsGetDevices(params *JobsGetDevicesParams) (*JobsGetDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsGetDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_GetDevices",
		Method:             "GET",
		PathPattern:        "/jobs/{job_id}/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsGetDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsGetDevicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_GetDevices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsList gets the list of jobs in an application
*/
func (a *Client) JobsList(params *JobsListParams) (*JobsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_List",
		Method:             "GET",
		PathPattern:        "/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsRerun reruns a job on failed devices

  Execute a rerun of an existing job on all failed devices.
*/
func (a *Client) JobsRerun(params *JobsRerunParams) (*JobsRerunOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsRerunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_Rerun",
		Method:             "PUT",
		PathPattern:        "/jobs/{job_id}/rerun/{rerun_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsRerunReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsRerunOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_Rerun: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsResume resumes a stopped job

  Resume execution of an existing stopped job.
*/
func (a *Client) JobsResume(params *JobsResumeParams) (*JobsResumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsResumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_Resume",
		Method:             "POST",
		PathPattern:        "/jobs/{job_id}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsResumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsResumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_Resume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsSet executes a new job

  Create and execute a new job via its job definition.
*/
func (a *Client) JobsSet(params *JobsSetParams) (*JobsSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_Set",
		Method:             "PUT",
		PathPattern:        "/jobs/{job_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  JobsStop stops a running job

  Stop execution of a job that is currently running.
*/
func (a *Client) JobsStop(params *JobsStopParams) (*JobsStopNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewJobsStopParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Jobs_Stop",
		Method:             "POST",
		PathPattern:        "/jobs/{job_id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &JobsStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*JobsStopNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Jobs_Stop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RolesGet gets a role by ID
*/
func (a *Client) RolesGet(params *RolesGetParams) (*RolesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Roles_Get",
		Method:             "GET",
		PathPattern:        "/roles/{role_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RolesList gets the list of roles in an application
*/
func (a *Client) RolesList(params *RolesListParams) (*RolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Roles_List",
		Method:             "GET",
		PathPattern:        "/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RolesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RolesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Roles_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RulesGet gets a rule by ID
*/
func (a *Client) RulesGet(params *RulesGetParams) (*RulesGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_Get",
		Method:             "GET",
		PathPattern:        "/rules/{rule_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RulesGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Rules_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RulesList gets the list of rules in an application
*/
func (a *Client) RulesList(params *RulesListParams) (*RulesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRulesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Rules_List",
		Method:             "GET",
		PathPattern:        "/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RulesListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RulesListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Rules_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersGet gets a user by ID
*/
func (a *Client) UsersGet(params *UsersGetParams) (*UsersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Users_Get",
		Method:             "GET",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_Get: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersList gets the list of users in an application
*/
func (a *Client) UsersList(params *UsersListParams) (*UsersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Users_List",
		Method:             "GET",
		PathPattern:        "/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_List: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersRemove deletes a user
*/
func (a *Client) UsersRemove(params *UsersRemoveParams) (*UsersRemoveNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersRemoveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Users_Remove",
		Method:             "DELETE",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersRemoveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersRemoveNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_Remove: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UsersSet creates or update a user in the application
*/
func (a *Client) UsersSet(params *UsersSetParams) (*UsersSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUsersSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Users_Set",
		Method:             "PUT",
		PathPattern:        "/users/{user_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UsersSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UsersSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Users_Set: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
