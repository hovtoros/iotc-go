// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewJobsRerunParams creates a new JobsRerunParams object
// with the default values initialized.
func NewJobsRerunParams() *JobsRerunParams {
	var ()
	return &JobsRerunParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewJobsRerunParamsWithTimeout creates a new JobsRerunParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewJobsRerunParamsWithTimeout(timeout time.Duration) *JobsRerunParams {
	var ()
	return &JobsRerunParams{

		timeout: timeout,
	}
}

// NewJobsRerunParamsWithContext creates a new JobsRerunParams object
// with the default values initialized, and the ability to set a context for a request
func NewJobsRerunParamsWithContext(ctx context.Context) *JobsRerunParams {
	var ()
	return &JobsRerunParams{

		Context: ctx,
	}
}

// NewJobsRerunParamsWithHTTPClient creates a new JobsRerunParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewJobsRerunParamsWithHTTPClient(client *http.Client) *JobsRerunParams {
	var ()
	return &JobsRerunParams{
		HTTPClient: client,
	}
}

/*JobsRerunParams contains all the parameters to send to the API endpoint
for the jobs rerun operation typically these are written to a http.Request
*/
type JobsRerunParams struct {

	/*JobID
	  Unique ID of the job.

	*/
	JobID string
	/*RerunID
	  Unique ID of the job rerun.

	*/
	RerunID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the jobs rerun params
func (o *JobsRerunParams) WithTimeout(timeout time.Duration) *JobsRerunParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the jobs rerun params
func (o *JobsRerunParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the jobs rerun params
func (o *JobsRerunParams) WithContext(ctx context.Context) *JobsRerunParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the jobs rerun params
func (o *JobsRerunParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the jobs rerun params
func (o *JobsRerunParams) WithHTTPClient(client *http.Client) *JobsRerunParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the jobs rerun params
func (o *JobsRerunParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobID adds the jobID to the jobs rerun params
func (o *JobsRerunParams) WithJobID(jobID string) *JobsRerunParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the jobs rerun params
func (o *JobsRerunParams) SetJobID(jobID string) {
	o.JobID = jobID
}

// WithRerunID adds the rerunID to the jobs rerun params
func (o *JobsRerunParams) WithRerunID(rerunID string) *JobsRerunParams {
	o.SetRerunID(rerunID)
	return o
}

// SetRerunID adds the rerunId to the jobs rerun params
func (o *JobsRerunParams) SetRerunID(rerunID string) {
	o.RerunID = rerunID
}

// WriteToRequest writes these params to a swagger request
func (o *JobsRerunParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param job_id
	if err := r.SetPathParam("job_id", o.JobID); err != nil {
		return err
	}

	// path param rerun_id
	if err := r.SetPathParam("rerun_id", o.RerunID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
